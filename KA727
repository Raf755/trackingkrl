<!DOCTYPE html>
<html>
<head>
  <title>Tracking KA727 KRL Solo Balapan - Yogyakarta</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" rel="stylesheet" />
  <style>
    html, body, #map { height: 100%; margin: 0; padding: 0; }
    #info {
      background: #b00; color: white; padding: 10px;
      font-family: sans-serif; font-size: 14px;
    }
  </style>
</head>
<body>

<div id="info">
  🚆 Kereta KRL KA727 Solo Balapan – Yogyakarta <br>
  Rute: Semarang Tawang → Solo Balapan <br>
  Status: <span id="status">Mengambil lokasi...</span><br>
  🌡️ Suhu: N/A ℃ 🚉 Kecepatan: <span id="speed">0</span> km/jam |
  📍 Stasiun berikutnya: <span id="nextStation">-</span> ✏️ Jarak: <span id="distance">-</span> km
</div>

<div id="map"></div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
  const map = L.map('map').setView([-7.2, 110.5], 9);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '© OpenStreetMap'
  }).addTo(map);
  const userMarker = L.marker([0, 0]).addTo(map);

  function getDistance(lat1, lon1, lat2, lon2) {
    const R = 6371;
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) ** 2 +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon/2) ** 2;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  }

  // Rute tetap satu arah
  const rute = [
    ["Semarang Tawang", -6.966667, 110.428056],
    ["Alastua", -6.986701, 110.409516],
    ["Brumbung", -7.033168, 110.483973],
    ["Telawa", -7.185850, 110.751969],
    ["Padas (Melintas Langsung)", -7.179187, 110.671866],
    ["Kedungjati (Melintas Langsung)", -7.163554, 110.635695],
    ["Karangsono (Melintas Langsung)", -7.196307, 110.825662],
    ["Gundih", -7.218638, 110.899871],
    ["Solo Balapan", -7.556868, 110.821221]
  ];

  rute.forEach(([nama, lat, lon]) => {
    L.marker([lat, lon]).addTo(map).bindPopup(nama);
  });

  let lastIndexPassed = -1;

  function cekStasiunBerikutnya(lat, lon) {
    let closestIndex = 0;
    let closestDistance = Infinity;

    for (let i = 0; i < rute.length; i++) {
      const [_, stLat, stLon] = rute[i];
      const dist = getDistance(lat, lon, stLat, stLon);
      if (dist < closestDistance) {
        closestDistance = dist;
        closestIndex = i;
      }
    }

    if (closestDistance < 0.2) {
      lastIndexPassed = closestIndex;
    }

    const nextIndex = Math.min(lastIndexPassed + 1, rute.length - 1);
    const nextStation = rute[nextIndex];
    const jarak = getDistance(lat, lon, nextStation[1], nextStation[2]);

    return {
      berikutnya: nextStation[0],
      jarak: jarak.toFixed(2)
    };
  }

  navigator.geolocation.watchPosition(pos => {
    const lat = pos.coords.latitude;
    const lon = pos.coords.longitude;
    const speed = pos.coords.speed ? (pos.coords.speed * 3.6).toFixed(1) : 0;

    userMarker.setLatLng([lat, lon]);
    map.setView([lat, lon]);

    document.getElementById("speed").textContent = speed;

    const info = cekStasiunBerikutnya(lat, lon);
    document.getElementById("nextStation").textContent = info.berikutnya;
    document.getElementById("distance").textContent = info.jarak;
    document.getElementById("status").textContent = "Berjalan";
  }, err => {
    document.getElementById("status").textContent = "Gagal mengambil lokasi";
  }, {
    enableHighAccuracy: true,
    maximumAge: 0,
    timeout: 10000
  });
</script>

</body>
</html>
